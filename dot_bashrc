#
# ~/.bashrc
#

[[ $- != *i* ]] && return

colors() {
	local fgc bgc vals seq0

	printf "Color escapes are %s\n" '\e[${value};...;${value}m'
	printf "Values 30..37 are \e[33mforeground colors\e[m\n"
	printf "Values 40..47 are \e[43mbackground colors\e[m\n"
	printf "Value  1 gives a  \e[1mbold-faced look\e[m\n\n"

	# foreground colors
	for fgc in {30..37}; do
		# background colors
		for bgc in {40..47}; do
			fgc=${fgc#37} # white
			bgc=${bgc#40} # black

			vals="${fgc:+$fgc;}${bgc}"
			vals=${vals%%;}

			seq0="${vals:+\e[${vals}m}"
			printf "  %-9s" "${seq0:-(default)}"
			printf " ${seq0}TEXT\e[m"
			printf " \e[${vals:+${vals+$vals;}}1mBOLD\e[m"
		done
		echo; echo
	done
}

[ -r /usr/share/bash-completion/bash_completion ] && . /usr/share/bash-completion/bash_completion

# Change the window title of X terminals
case ${TERM} in
	xterm*|rxvt*|Eterm*|aterm|kterm|gnome*|interix|konsole*)
		PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/\~}\007"'
		;;
	screen*)
		PROMPT_COMMAND='echo -ne "\033_${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/\~}\033\\"'
		;;
esac

use_color=true

# Set colorful PS1 only on colorful terminals.
# dircolors --print-database uses its own built-in database
# instead of using /etc/DIR_COLORS.  Try to use the external file
# first to take advantage of user additions.  Use internal bash
# globbing instead of external grep binary.
safe_term=${TERM//[^[:alnum:]]/?}   # sanitize TERM
match_lhs=""
[[ -f ~/.dir_colors   ]] && match_lhs="${match_lhs}$(<~/.dir_colors)"
[[ -f /etc/DIR_COLORS ]] && match_lhs="${match_lhs}$(</etc/DIR_COLORS)"
[[ -z ${match_lhs}    ]] \
	&& type -P dircolors >/dev/null \
	&& match_lhs=$(dircolors --print-database)
[[ $'\n'${match_lhs} == *$'\n'"TERM "${safe_term}* ]] && use_color=true

if ${use_color} ; then
	# colors made easy
	txtblk='\[\033[00;30m\]' # Black - Regular
	txtred='\[\033[00;31m\]' # Red
	txtgrn='\[\033[00;32m\]' # Green
	txtylw='\[\033[00;33m\]' # Yellow
	txtblu='\[\033[00;34m\]' # Blue
	txtpur='\[\033[00;35m\]' # Purple
	txtcyn='\[\033[00;36m\]' # Cyan
	txtwht='\[\033[00;37m\]' # White
	bldblk='\[\033[01;30m\]' # Black - Bold
	bldred='\[\033[01;31m\]' # Red
	bldgrn='\[\033[01;32m\]' # Green
	bldylw='\[\033[01;33m\]' # Yellow
	bldblu='\[\033[01;34m\]' # Blue
	bldpur='\[\033[01;35m\]' # Purple
	bldcyn='\[\033[01;36m\]' # Cyan
	bldwht='\[\033[01;37m\]' # White
	undblk='\[\033[04;30m\]' # Black - Underline
	undred='\[\033[04;31m\]' # Red
	undgrn='\[\033[04;32m\]' # Green
	undylw='\[\033[04;33m\]' # Yellow
	undblu='\[\033[04;34m\]' # Blue
	undpur='\[\033[04;35m\]' # Purple
	undcyn='\[\033[04;36m\]' # Cyan
	undwht='\[\033[04;37m\]' # White
	bakblk='\[\033[40m\]'   # Black - Background
	bakred='\[\033[41m\]'   # Red
	bakgrn='\[\033[42m\]'   # Green
	bakylw='\[\033[43m\]'   # Yellow
	bakblu='\[\033[44m\]'   # Blue
	bakpur='\[\033[45m\]'   # Purple
	bakcyn='\[\033[46m\]'   # Cyan
	bakwht='\[\033[47m\]'   # White
	txtrst='\[\033[00m\]'    # Text Reset

	# Enable colors for ls, etc.  Prefer ~/.dir_colors #64489
	if type -P dircolors >/dev/null ; then
		if [[ -f ~/.dir_colors ]] ; then
			eval $(dircolors -b ~/.dir_colors)
		elif [[ -f /etc/DIR_COLORS ]] ; then
			eval $(dircolors -b /etc/DIR_COLORS)
		fi
	fi

	if [[ ${EUID} == 0 ]] ; then
		color_main="$bldred"
		color_path="$bldcyn"
	else
		color_main="$bldgrn"
		color_path="$bldwht"
	fi
	# curl -o ~/.git-prompt.sh https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh
	if [[ -f ~/.git-prompt.sh ]] ; then
		source ~/.git-prompt.sh

		PROMPT_BEFORE="$color_main[\h$color_path \W$color_main]$txtrst";
		PROMPT_AFTER="$color_main\$ $txtrst";
		PROMPT_COMMAND='__git_ps1 "$PROMPT_BEFORE" "$PROMPT_AFTER"'
		export GIT_PS1_SHOWDIRTYSTATE='true' # shows dirty state with * (red, unstaged) or + (green, staged)
		# export GIT_PS1_SHOWSTASHSTATE='true' # shows if there is any stash with $
		export GIT_PS1_SHOWUNTRACKEDFILES='true' # shows untracked files with % (red)
		export GIT_PS1_SHOWUPSTREAM='auto' # shows comparison to upstream : <, >, <>, =
		export GIT_PS1_SHOWCOLORHINTS='true' # shows dirty state colored
	else
		PS1="$color_main[\h$color_path \W$color_main]\$ $txtrst"
	fi

	alias ls='ls --color=auto'
	alias grep='grep --colour=auto'
	alias egrep='egrep --colour=auto'
	alias fgrep='fgrep --colour=auto'
else
	# show root@ when we don't have colors
	PS1='\u@\h \W \$ '
fi

unset use_color safe_term match_lhs sh

alias cp="cp -i"                          # confirm before overwriting something
alias df='df -h'                          # human-readable sizes
alias free='free -m'                      # show sizes in MB
alias np='nano -w PKGBUILD'
alias more=less

xhost +local:root > /dev/null 2>&1

complete -cf sudo

# Bash won't get SIGWINCH if another process is in the foreground.
# Enable checkwinsize so that bash will check the terminal size when
# it regains control.  #65623
# http://cnswww.cns.cwru.edu/~chet/bash/FAQ (E11)
shopt -s checkwinsize

shopt -s expand_aliases

# export QT_SELECT=4

# Enable history appending instead of overwriting.  #139609
shopt -s histappend

#
# # ex - archive extractor
# # usage: ex <file>
ex ()
{
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1     ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

[[ -f ~/.cargo/env ]] && . ~/.cargo/env # Rust/Cargo env
[[ -f ~/.aliases ]] && . ~/.aliases
